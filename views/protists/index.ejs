<%- include('../partials/header') %>
<div class="mb-3">
  <h1>Your <%= title %></h1>
</div>  
<div id="rowFlex" class="mb-3"> <!-- Adding margin-bottom for spacing -->
  <div class="container mt-5">
    <form id="search-form" action="/protists" method="GET">
      <div class="input-group">
        <input type="text" class="form-control" id="search-bar" name="searchBar" placeholder="Search">
        <button type="submit" class="btn btn-primary">Search</button>
      </div>
    </form>
  </div>
    <!-- Dropdown Menu -->
    <div class="dropdown" id="buttonPad">
      <button class="btn btn-secondary dropdown-toggle" type="button" id="searchDropdown" data-bs-toggle="dropdown" data-bs-target="#" aria-haspopup="true" aria-expanded="false">
        Order by
      </button>
      <div class="dropdown-menu" aria-labelledby="searchDropdown">
        <a class="dropdown-item" href="#">Default (Alphabetical)</a>
        <a class="dropdown-item" href="#">Taxonomy</a>
        <a class="dropdown-item" href="#">Conservation Status</a>
        <a class="dropdown-item" href="#">Invasiveness</a>
        <a class="dropdown-item" href="#">Industrial Usage</a>
        <a class="dropdown-item" href="#">Nutrition</a>
        <a class="dropdown-item" href="#">Toxicity</a>
        <!-- Dropdown items go here -->
      </div>
   </div>
    <!--{{#if user}}-->
    <a class="btn btn-info" id="buttonPad" href="/protists/add">Add Specimen</a>
    <!--{{/if}}-->
</div>

<!--{{! To Show data }}-->
<div class="page-container"> <!-- Line Changed -->
  <div class="table-container"> <!-- Line Changed -->
    <table class="table table-striped table-hover">
      <thead>
        <th>Name</th>
        <th>Date Identified</th>
        <th>Location</th>
        <th>Map</th>
        <th>Image</th>
        <!--{{#if ./user}}-->
        <th>Actions</th>
        <!--{{/if}} -->
      </thead>
      <tbody>
        <% 
          const userDataset = dataset.filter(item => item.user && item.user._id && item.user._id.toString() === user._id.toString());
          
          userDataset.forEach(function(item) { 
        %>
          <tr>
            <td class="col-2"><%= item.name %><br><i><%= item.binomialNomenclature %></i></td>
            <td>
              <ul id="cellList"><%= item.updateDate %></ul>
            </td>
            <td>
              <ul id="cellList" class="coordinates"><%= item.location %></ul>
            </td>
            <td class="map-container">
              <div class="map" style="height: 250px; width: 250px;"></div>
            </td>
            <td class="col-md-3">
              <img class="thumbnail w-75" src="images/protista_images/<%= item.image %>" onclick="showImage(this)" />
              <div class="overlay" onclick="hideImage()">
                <span class="close" onclick="hideImage()">&times;</span>
                <img class="enlarged-image" id="enlarged-image" />
              </div>
            </td>
            <td id="action">
              <a class="btn btn-primary" href="/protists/edit/<%= item._id %>">Edit</a>
              <a class="btn btn-danger" href="/protists/delete/<%= item._id %>" onclick="return confirmDeletion()">Delete</a>
            </td>
          </tr>
        <% }); %>
      </tbody>
    </table>
    <!-- Pagination -->
  </div> <!-- Line Changed -->
  <!-- Pagination -->
  <div class="pagination">
    <% if (currentPage > 1) { %>
      <a href="/protists?page=1&searchBar=<%= searchQuery %>">&lt;&lt;</a>
      <a href="/protists?page=<%= Math.max(currentPage - 10, 1) %>&searchBar=<%= searchQuery %>">&lt;</a>
    <% } %>
  
    <% const maxPagesToShow = 10; // Adjust this value based on your preference %>
    <% const startPage = Math.max(currentPage - Math.floor(maxPagesToShow / 2), 1); %>
    <% const endPage = Math.min(startPage + maxPagesToShow - 1, totalPages); %>
  
    <% for (let i = startPage; i <= endPage; i++) { %>
      <a href="/protists?page=<%= i %>&searchBar=<%= searchQuery %>" class="<%= currentPage === i ? 'active' : '' %>">
        <%= i %>
      </a>
    <% } %>
  
    <% if (currentPage < totalPages) { %>
      <a href="/protists?page=<%= Math.min(currentPage + 10, totalPages) %>&searchBar=<%= searchQuery %>">&gt;</a>
      <a href="/protists?page=<%= totalPages %>&searchBar=<%= searchQuery %>">&gt;&gt;</a>
    <% } %>
  </div>
</div> <!-- Line Changed -->

<%- include('../partials/footer') %>


<script defer src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
<script defer src="/javascripts/createMapDataviewer.js"></script> 


<script defer>
  document.addEventListener("DOMContentLoaded", function () {
    var coordinatesElements = document.querySelectorAll('.coordinates');

    var dotIcon = L.divIcon({
      className: 'custom-dot-icon',
      html: '<div class="dot"></div>',
      iconSize: [2, 2]
    });

    var initialGridSize = 10;
    const zoomLevelToGridSize = Array.from({ length: 19 }, (_, i) => initialGridSize / Math.pow(2, i));

    function getGridSizeForZoom(zoomLevel) {
      return zoomLevelToGridSize[Math.floor(zoomLevel)] || initialGridSize;
    }

    function processCoordinates(locations, gridSize) {
      let grid = {};

      locations.forEach(function (location) {
        var [latitude, longitude] = location.split(',').map(Number);
        var latKey = Math.floor(latitude / gridSize) * gridSize;
        var lngKey = Math.floor(longitude / gridSize) * gridSize;
        var key = `${latKey},${lngKey}`;

        if (!grid[key]) {
          grid[key] = { count: 0, latitudes: [], longitudes: [] };
        }

        grid[key].count += 1;
        grid[key].latitudes.push(latitude);
        grid[key].longitudes.push(longitude);
      });

      return grid;
    }

    function calculateQuartiles(counts) {
      counts.sort((a, b) => a - b);
      let q1 = counts[Math.floor(counts.length / 4)] || 0;
      let q2 = counts[Math.floor(counts.length / 2)] || 0;
      let q3 = counts[Math.floor(3 * counts.length / 4)] || 0;
      return { q1, q2, q3 };
    }

    function calculateVarianceAndStdDev(counts) {
      const n = counts.length;
      if (n === 0) return { variance: 0, stdDev: 0 };

      const mean = counts.reduce((sum, count) => sum + count, 0) / n;
      const variance = counts.reduce((sum, count) => sum + Math.pow(count - mean, 2), 0) / n;
      const stdDev = Math.sqrt(variance);

      return { variance, stdDev };
    }

    function getColorForCount(count, quartiles) {
      if (count >= quartiles.q3) return 'rgba(255, 0, 0, 0.6)';
      if (count >= quartiles.q2) return 'rgba(255, 150, 0, 0.6)';
      if (count >= quartiles.q1) return 'rgba(255, 255, 0, 0.6)';
      return 'rgba(255, 255, 200, 0.6)';
    }

    function logGridCounts(grid) {
      const countsArray = Object.values(grid).map(cell => cell.count);
      countsArray.sort((a, b) => a - b);
      const quartiles = calculateQuartiles(countsArray);
      const { variance, stdDev } = calculateVarianceAndStdDev(countsArray);

      console.log("Sorted grid counts at current zoom level:", countsArray);
      console.log("Quartiles:", quartiles);
      console.log("Variance:", variance);
      console.log("Standard Deviation:", stdDev);

      return { quartiles, variance, stdDev };
    }

    function getGridAreaInKm2(lat, gridSize) {
      const kmPerDegreeLat = 111;
      const kmPerDegreeLng = 111 * Math.cos(lat * Math.PI / 180);
      return (gridSize * kmPerDegreeLat) * (gridSize * kmPerDegreeLng);
    }

    function renderGrid(map, grid, gridSize, coordinatesElement) {
      map.eachLayer(function(layer) {
        if (layer instanceof L.Rectangle) {
          map.removeLayer(layer);
        }
      });

      const countsArray = Object.values(grid).map(cell => cell.count);
      const { quartiles, variance, stdDev } = logGridCounts(grid);

      Object.keys(grid).forEach(function (key) {
        let [latKey, lngKey] = key.split(',').map(Number);
        let count = grid[key].count;
        let color = getColorForCount(count, quartiles);

        let bounds = [
          [latKey, lngKey],
          [latKey + gridSize, lngKey + gridSize]
        ];

        let gridSquare = L.rectangle(bounds, { color: color, weight: 1, fillOpacity: 0.5 }).addTo(map);
        gridSquare.on('click', function () {
          const topLeft = [latKey, lngKey];
          const bottomRight = [latKey + gridSize, lngKey + gridSize];
          const topRight = [latKey, lngKey + gridSize];
          const bottomLeft = [latKey + gridSize, lngKey];
          const centerLat = (latKey + latKey + gridSize) / 2;
          const area = getGridAreaInKm2(centerLat, gridSize);
          const density = count / area;

          const coordinatesText = `[(${topLeft[0]},${topLeft[1]}),(${bottomLeft[0]},${bottomLeft[1]}),(${topRight[0]},${topRight[1]}),(${bottomRight[0]},${bottomRight[1]})]`;

          const mapContainer = coordinatesElement.closest('td');
          mapContainer.querySelector('.gridCoordinates').innerHTML = `<u>Grid Cell Coordinates</u>:<br> ${coordinatesText}`;
          mapContainer.querySelector('.gridArea').innerHTML = `<u>Area</u>: ${area.toFixed(10)} km²`;
          mapContainer.querySelector('.gridDensity').innerHTML = `<u>Density</u>: ${count}/${area.toFixed(6)} = <br> ${density.toFixed(10)} count/km²`;
        });
      });
    }

    function initializeMap(mapElement, locations) {
      var map = L.map(mapElement).setView([0, 0], 13);
      L.tileLayer('https://mt1.google.com/vt/lyrs=m&x={x}&y={y}&z={z}', {
        attribution: '© Google Maps'
      }).addTo(map);

      var latitudes = [];
      var longitudes = [];
      var bounds = L.latLngBounds();

      locations.forEach(function (location) {
        var [latitude, longitude] = location.split(',').map(Number);
        bounds.extend([latitude, longitude]);
        latitudes.push(latitude);
        longitudes.push(longitude);
      });

      map.fitBounds(bounds.pad(0.5));

      return map;
    }

    coordinatesElements.forEach(function (coordinatesElement) {
      try {
        var locations = JSON.parse(coordinatesElement.dataset.species);
        var commonContainer = coordinatesElement.closest('tr');
        var mapElement = commonContainer.querySelector('.map');
        var mapContainer = commonContainer.querySelector('td.map-container');
        var map = initializeMap(mapElement, locations);

        let gridSize = getGridSizeForZoom(map.getZoom());
        var grid = processCoordinates(locations, gridSize);
        renderGrid(map, grid, gridSize, mapContainer);

        locations.forEach(function (location) {
          var [latitude, longitude] = location.split(',').map(Number);
          L.marker([latitude, longitude], { icon: dotIcon }).addTo(map);
        });

        let previousZoom = map.getZoom();
        map.on('zoomend', function() {
          let currentZoom = map.getZoom();
          if (currentZoom !== previousZoom) {
            gridSize = getGridSizeForZoom(currentZoom);
            grid = processCoordinates(locations, gridSize);
            renderGrid(map, grid, gridSize, mapContainer);
            previousZoom = currentZoom;
          }
        });

      } catch (error) {
        console.error("Error parsing coordinates:", error);
        var coordinates = coordinatesElement.textContent.trim();
        var coordinatesMatch = coordinates.match(/^\s*(-?\d+(\.\d+)?),\s*(-?\d+(\.\d+)?)\s*$/);

        if (coordinatesMatch) {
          var [latitude, longitude] = coordinates.split(',').map(Number);
          var commonContainer = coordinatesElement.closest('tr');
          var mapElement = commonContainer.querySelector('.map');
          var mapContainer = commonContainer.querySelector('td.map-container');
          var map = initializeMap(mapElement, [coordinates]);

          L.marker([latitude, longitude]).addTo(map);

          let previousZoom = map.getZoom();
          map.on('zoomend', function() {
            let currentZoom = map.getZoom();
            if (currentZoom !== previousZoom) {
              gridSize = getGridSizeForZoom(currentZoom);
              var locations = [coordinates];
              grid = processCoordinates(locations, gridSize);
              renderGrid(map, grid, gridSize, mapContainer);
              previousZoom = currentZoom;
            }
          });

        } else {
          console.log("Invalid coordinates format:", coordinates);
        }
      }
    });
  });
</script>

