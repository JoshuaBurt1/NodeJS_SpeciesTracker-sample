<%- include('../partials/header') %>

<script defer src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
<script defer src="/javascripts/createMapDataviewer.js"></script> 

<h1 class="display-5"><%= title %></h1>
<div class="mb-3">
  <p class="lead">View all data uploaded by users</p>
</div>  

<div class="row">
  <div class="col-md-3" id="preWorksheet" style="display: flex; flex-direction: column; height: 100%;">
    <h3>Worksheet</h3>
    <ul id="worksheetEntries" style="flex-grow: 1;">
      <!-- Entries will be added here dynamically -->
    </ul>
    <button id="analyze" class="btn btn-primary" style="margin-top: auto;">Analyze</button> <!-- Button at bottom -->
    <div id="resultArea" style="max-height: 500px; overflow-y: auto; border: 1px solid #ccc; padding: 10px; margin-top: 10px;"></div>

  </div>
  
  <div class="col-md-9">
    <div id="rowFlex" class="mb-3"> 
      <div class="dropdown" id="buttonPadDataviewer">
        <form id="dataviewer-dropdown-form" action="/dataviewer" method="GET">
          <div class="input-group" id="searchDropdown" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">  
            <input type="text" class="form-control" id="dataviewer-search-bar" name="searchBar" placeholder="Search. Use comma for multiple terms.">
          </div>
          <div class="dropdown-menu" id="dataviewer-dropdown-menu" aria-labelledby="searchDropdown">
            <!-- Dropdown options will be dynamically inserted here -->
          </div>
        </form>
      </div>

      <!-- Dropdown Menu -->
      <div class="dropdown" id="buttonPad">
        <button class="btn btn-secondary dropdown-toggle" type="button" id="searchDropdown" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
          Order by
        </button>
        <div class="dropdown-menu" aria-labelledby="searchDropdown">
          <a class="dropdown-item" href="#">Default (Alphabetical)</a>
          <a class="dropdown-item" href="#">Taxonomy</a>
          <a class="dropdown-item" href="#">Conservation Status</a>
          <a class="dropdown-item" href="#">Invasiveness</a>
          <a class="dropdown-item" href="#">Industrial Usage</a>
          <a class="dropdown-item" href="#">Nutrition</a>
          <a class="dropdown-item" href="#">Toxicity</a>
        </div>
      </div>
    </div>

    <!-- To Show data -->
    <div class="page-container">
      <div class="table-container-dataviewer">
        <% if (dataset && dataset.length > 0) { %>
          <table class="table table-striped table-hover">
            <thead>
              <tr>
                <th>Name</th>
                <th>Date Identified</th>
                <th>Location</th>
                <th>Map</th>
                <th>Image</th>
              </tr>
            </thead>
            <tbody>
              <% dataset.forEach(function(item) { %>
                <tr>
                  <td class="col-2">
                    <a href="/dataviewer/view?name=<%= encodeURIComponent(item.binomialNomenclature) %>">
                      <b><%= item.name %></b>
                    </a><br><i><%= item.binomialNomenclature %></i><br>
                    <% if (item.showSightedLogo) { %>
                      <img src="/public/site_images/sightedLogo.png" alt="Heart Icon" style="width: 50%; height: 50%;" />
                    <% } %>
                    <br>
                    <input type="radio" name="metadata" value="0" id="same-metadata"> 
                    <label for="same-metadata">Unmodified metadata</label><br> <!-- of all data - unmodified metadata (Most reliable)-->
                    <input type="radio" name="metadata" value="1" id="changed-metadata"> 
                    <label for="changed-metadata">Modified metadata</label><br> <!--of all data - modified metadata; data integrity check (Not as reliable)-->
                    <input type="radio" name="metadata" value="default" id="default-metadata" checked> 
                    <label for="default-metadata">Default (Both)</label><br><br> <!--all data -->
                    <input type="checkbox" name="metadata" value="0" id="user-data"> 
                    <label for="same-metadata">Only your data</label><br> <!--of all data - your data (with unmodified, modified, or default)-->
                    <input type="checkbox" name="metadata" value="0" id="group-data"> 
                    <label for="same-metadata">Only group data</label> <!--of all data - a group/individual user data (with unmodified, modified, or default)-->
                    <input type="text" id="group-name" placeholder="Enter group name" /><br> <!-- name of the group or individual user-->
                
                    <!-- Time period entry -->
                    <label for="time-period">Time Period:</label>
                    <input type="text" id="time-period" placeholder="Enter time period" /><br><br>
                    
                    <!-- Add to Worksheet button -->
                    <button type="button" id="add-to-worksheet" onclick="addToWorksheet('<%= item.binomialNomenclature %>', document.getElementById('time-period').value)">Add to Worksheet</button>
                  </td>
                  <td>
                    <ul id="cellList">
                      <% if (item.updateDates && item.updateDates.length > 0) { %>
                        <% item.updateDates.slice(0, 10).forEach(function(updateDate) { %>
                          <li><%= updateDate %></li>
                        <% }); %>
                        <% if (item.updateDates.length > 10) { %>
                          <li>…</li> <!-- Ellipsis for more entries -->
                        <% } %>
                      <% } else { %>
                        <li>No date available</li>
                      <% } %>
                    </ul>
                  </td>
                  <td>
                    <div class="container">
                      <div class="coordinates" data-species="<%= JSON.stringify(item.locations) %>">
                        <ul id="cellList">
                          <% if (item.locations && item.locations.length > 0) { %>
                            <% item.locations.slice(0, 10).forEach(function(location) { %>
                              <li><%= location %></li>
                            <% }); %>
                            <% if (item.locations.length > 10) { %>
                              <li>…</li> <!-- Ellipsis for more entries -->
                            <% } %>
                          <% } else { %>
                            <li>No location available</li>
                          <% } %>
                        </ul>
                      </div>
                    </div>
                  </td>
                  <td id="td5" class="map-container">
                    <div class="map" style="height: 250px; width: 250px;"></div>
                    <div class="gridCoordinates"></div>
                    <div class="gridArea"></div>
                    <div class="gridDensity"></div>
                  </td>
                  <td class="col-md-3">
                    <% if (item.images && item.images.length > 0) { %>
                      <% if (item.images.length === 1) { %>
                        <img class="thumbnail w-75" src="/images/<%= item.kingdom.toLowerCase() %>_images/<%= item.images[0] %>" onclick="showImage(this)" />
                      <% } else { %>
                        <img class="thumbnail w-75" src="/images/<%= item.kingdom.toLowerCase() %>_images/<%= item.images[0] %>" onclick="showImage(this)" /> <br>
                        <span class="additional-images">+ <%= item.images.length - 1 %> more</span>
                      <% } %>
                    <% } %>
                    <div class="overlay" onclick="hideImage()">
                      <span class="close" onclick="hideImage()">&times;</span>
                      <img class="enlarged-image" id="enlarged-image" />
                    </div>
                  </td>
                </tr>
              <% }); %>
            </tbody>
          </table>
        <% } else if (searchQuery) { %>
          <p>No data available. Try another search.</p>
          <div id="imageVisual"> 
            <img id="dataviewerNoImage" src="public/site_images/noimage.png" alt="Image not found" />
          </div>      
        <% } else { %>
          <p><!--Some kind of message here --></p>
        <% } %>
      </div>
    </div>
  </div>
</div>

<%- include('../partials/footer') %>

<script defer src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />

<script defer>
  document.addEventListener("DOMContentLoaded", function () {
    var coordinatesElements = document.querySelectorAll('.coordinates');

    var dotIcon = L.divIcon({
      className: 'custom-dot-icon',
      html: '<div class="dot"></div>',
      iconSize: [2, 2]
    });

    var initialGridSize = 10;
    const zoomLevelToGridSize = Array.from({ length: 19 }, (_, i) => initialGridSize / Math.pow(2, i));

    function getGridSizeForZoom(zoomLevel) {
      return zoomLevelToGridSize[Math.floor(zoomLevel)] || initialGridSize;
    }

    function processCoordinates(locations, gridSize) {
      let grid = {};

      locations.forEach(function (location) {
        var [latitude, longitude] = location.split(',').map(Number);
        var latKey = Math.floor(latitude / gridSize) * gridSize;
        var lngKey = Math.floor(longitude / gridSize) * gridSize;
        var key = `${latKey},${lngKey}`;

        if (!grid[key]) {
          grid[key] = { count: 0, latitudes: [], longitudes: [] };
        }

        grid[key].count += 1;
        grid[key].latitudes.push(latitude);
        grid[key].longitudes.push(longitude);
      });

      return grid;
    }

    function calculateQuartiles(counts) {
      counts.sort((a, b) => a - b);
      let q1 = counts[Math.floor(counts.length / 4)] || 0;
      let q2 = counts[Math.floor(counts.length / 2)] || 0;
      let q3 = counts[Math.floor(3 * counts.length / 4)] || 0;
      return { q1, q2, q3 };
    }

    function calculateVarianceAndStdDev(counts) {
      const n = counts.length;
      if (n === 0) return { variance: 0, stdDev: 0 };

      const mean = counts.reduce((sum, count) => sum + count, 0) / n;
      const variance = counts.reduce((sum, count) => sum + Math.pow(count - mean, 2), 0) / n;
      const stdDev = Math.sqrt(variance);

      return { variance, stdDev };
    }

    function getColorForCount(count, quartiles) {
      if (count >= quartiles.q3) return 'rgba(255, 0, 0, 0.6)';
      if (count >= quartiles.q2) return 'rgba(255, 150, 0, 0.6)';
      if (count >= quartiles.q1) return 'rgba(255, 255, 0, 0.6)';
      return 'rgba(255, 255, 200, 0.6)';
    }

    function logGridCounts(grid) {
      const countsArray = Object.values(grid).map(cell => cell.count);
      countsArray.sort((a, b) => a - b);
      const quartiles = calculateQuartiles(countsArray);
      const { variance, stdDev } = calculateVarianceAndStdDev(countsArray);

      console.log("Sorted grid counts at current zoom level:", countsArray);
      console.log("Quartiles:", quartiles);
      console.log("Variance:", variance);
      console.log("Standard Deviation:", stdDev);

      return { quartiles, variance, stdDev };
    }

    function getGridAreaInKm2(lat, gridSize) {
      const kmPerDegreeLat = 111;
      const kmPerDegreeLng = 111 * Math.cos(lat * Math.PI / 180);
      return (gridSize * kmPerDegreeLat) * (gridSize * kmPerDegreeLng);
    }

    function renderGrid(map, grid, gridSize, coordinatesElement) {
      map.eachLayer(function(layer) {
        if (layer instanceof L.Rectangle) {
          map.removeLayer(layer);
        }
      });

      const countsArray = Object.values(grid).map(cell => cell.count);
      const { quartiles, variance, stdDev } = logGridCounts(grid);

      Object.keys(grid).forEach(function (key) {
        let [latKey, lngKey] = key.split(',').map(Number);
        let count = grid[key].count;
        let color = getColorForCount(count, quartiles);

        let bounds = [
          [latKey, lngKey],
          [latKey + gridSize, lngKey + gridSize]
        ];

        let gridSquare = L.rectangle(bounds, { color: color, weight: 1, fillOpacity: 0.5 }).addTo(map);
        gridSquare.on('click', function () {
          const topLeft = [latKey, lngKey];
          const bottomRight = [latKey + gridSize, lngKey + gridSize];
          const topRight = [latKey, lngKey + gridSize];
          const bottomLeft = [latKey + gridSize, lngKey];
          const centerLat = (latKey + latKey + gridSize) / 2;
          const area = getGridAreaInKm2(centerLat, gridSize);
          const density = count / area;

          const coordinatesText = `[(${topLeft[0]},${topLeft[1]}),(${bottomLeft[0]},${bottomLeft[1]}),(${topRight[0]},${topRight[1]}),(${bottomRight[0]},${bottomRight[1]})]`;

          const mapContainer = coordinatesElement.closest('td');
          mapContainer.querySelector('.gridCoordinates').innerHTML = `<u>Grid Cell Coordinates</u>:<br> ${coordinatesText}`;
          mapContainer.querySelector('.gridArea').innerHTML = `<u>Area</u>: ${area.toFixed(10)} km²`;
          mapContainer.querySelector('.gridDensity').innerHTML = `<u>Density</u>: ${count}/${area.toFixed(6)} = <br> ${density.toFixed(10)} count/km²`;
        });
      });
    }

    function initializeMap(mapElement, locations) {
      var map = L.map(mapElement).setView([0, 0], 13);
      L.tileLayer('https://mt1.google.com/vt/lyrs=m&x={x}&y={y}&z={z}', {
        attribution: '© Google Maps'
      }).addTo(map);

      var latitudes = [];
      var longitudes = [];
      var bounds = L.latLngBounds();

      locations.forEach(function (location) {
        var [latitude, longitude] = location.split(',').map(Number);
        bounds.extend([latitude, longitude]);
        latitudes.push(latitude);
        longitudes.push(longitude);
      });

      map.fitBounds(bounds.pad(0.5));

      return map;
    }

    coordinatesElements.forEach(function (coordinatesElement) {
      try {
        var locations = JSON.parse(coordinatesElement.dataset.species);
        var commonContainer = coordinatesElement.closest('tr');
        var mapElement = commonContainer.querySelector('.map');
        var mapContainer = commonContainer.querySelector('td.map-container');
        var map = initializeMap(mapElement, locations);

        let gridSize = getGridSizeForZoom(map.getZoom());
        var grid = processCoordinates(locations, gridSize);
        renderGrid(map, grid, gridSize, mapContainer);

        locations.forEach(function (location) {
          var [latitude, longitude] = location.split(',').map(Number);
          L.marker([latitude, longitude], { icon: dotIcon }).addTo(map);
        });

        let previousZoom = map.getZoom();
        map.on('zoomend', function() {
          let currentZoom = map.getZoom();
          if (currentZoom !== previousZoom) {
            gridSize = getGridSizeForZoom(currentZoom);
            grid = processCoordinates(locations, gridSize);
            renderGrid(map, grid, gridSize, mapContainer);
            previousZoom = currentZoom;
          }
        });

      } catch (error) {
        console.error("Error parsing coordinates:", error);
        var coordinates = coordinatesElement.textContent.trim();
        var coordinatesMatch = coordinates.match(/^\s*(-?\d+(\.\d+)?),\s*(-?\d+(\.\d+)?)\s*$/);

        if (coordinatesMatch) {
          var [latitude, longitude] = coordinates.split(',').map(Number);
          var commonContainer = coordinatesElement.closest('tr');
          var mapElement = commonContainer.querySelector('.map');
          var mapContainer = commonContainer.querySelector('td.map-container');
          var map = initializeMap(mapElement, [coordinates]);

          L.marker([latitude, longitude]).addTo(map);

          let previousZoom = map.getZoom();
          map.on('zoomend', function() {
            let currentZoom = map.getZoom();
            if (currentZoom !== previousZoom) {
              gridSize = getGridSizeForZoom(currentZoom);
              var locations = [coordinates];
              grid = processCoordinates(locations, gridSize);
              renderGrid(map, grid, gridSize, mapContainer);
              previousZoom = currentZoom;
            }
          });

        } else {
          console.log("Invalid coordinates format:", coordinates);
        }
      }
    });
  });
</script>
